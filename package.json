{
  "name": "libmig-prototype",
  "displayName": "LibMig",
  "description": "A prototype plugin that enables automated Python library migration.",
  "license": "SEE LICENSE IN LICENSE",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "python", "library migration", "migration", "refactoring", "llm", "automation"
  ],
  "pricing": "Free",
  "icon": "128x128",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/your-repo.git"
  },
  "homepage": "https://github.com/your-username/your-repo/blob/main/README.md",




  "main": "./out/extension.js",
  "activationEvents": [
    "onLanguage:python",
    "onLanguage:pip-requirements",
    "workspaceContains:**/requirements*.txt",
    "workspaceContains:pyproject.toml"
  ],
  "contributes": {
    "commands": [
      {
        "command": "libmig.migrate",
        "title": "Migrate a Library",
        "category": "LibMig"
      },
      {
        "command": "libmig.viewTestResults",
        "title": "View migration test results",
        "category": "LibMig"
      },
      {
        "command": "libmig.viewWebview",
        "title": "Show Migration Webview",
        "category": "LibMig"
      },
      {
        "command": "libmig.viewDiff",
        "title": "Show Migration Preview",
        "category": "LibMig"
      },
      {
        "command": "libmig.backup",
        "title": "Backup a File Before Migrating",
        "category": "LibMig"
      },
      {
        "command": "libmig.restore",
        "title": "Restore a Migrated File",
        "category": "LibMig"
      },
      {
        "command": "libmig.healthCheck",
        "title": "Check Health of CLI Tool",
        "category": "LibMig"
      },
      {
        "command": "libmig.setApiKey",
        "title": "Set API Keys to be Stored",
        "category": "LibMig"
      }
    ],
    "configuration": [
      {
        "title": "LibMig",
        "type": "object",
        "properties": {
          "libmig.options.useTempDirectory": {
            "type": "boolean",
            "default": false,
            "description": "Direct the migrated output into a temp directory instead of directly modifying the workspace files"
          },
          "libmig.options.previewOnMigrationFailure": {
            "type": "boolean",
            "default": false,
            "description": "Show a preview for failed migrations"
          },
          "libmig.flags.forceRerun": {
            "type": "boolean",
            "default": false,
            "description": "Forcefully rerun the migration"
          },
          "libmig.flags.smartSkipTests": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Skip running tests if they are already done. Tests are considered done if: \n\n1. No new files are migrated \n\n2. test-report.json file exists \n\n3. cov-report.json both exists"
          },
          "libmig.options.enableSuggestions.(Experimental)": {
            "type": "boolean",
            "default": false,
            "description": "Suggest suitable target libraries by querying Libraries.io"
          },
          "libmig.flags.maxFileCount": {
            "type": "integer",
            "default": 20,
            "description": "Set the maximum number of files to migrate"
          },
          "libmig.flags.LLMClient": {
            "type": "string",
            "enum": [
              "gpt-4o-mini",
              "gpt-4o",
              "gpt-4.1"
            ],
            "default": "gpt-4o-mini",
            "description": "Select an LLM client to use for migrations"
          },
          "libmig.options.previewGrouping": {
            "type": "string",
            "enum": [
              "One-by-one",
              "All at once",
              "webview"
            ],
            "enumDescriptions": [
              "View files one-at-a-time",
              "Use VS Code's built-in Refactor Preview",
              "Use an experimental webview"
            ],
            "default": "One-by-one",
            "description": "Choose how migrated files are shown during preview"
          },
          "libmig.flags.migrationRounds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "enum": [
              "premig",
              "llmmig",
              "merge_skipped",
              "async_transform"
            ],
            "uniqueItems": true,
            "default": ["premig", "llmmig", "merge_skipped", "async_transform"],
            "description": "Specify which migration rounds should be run"
          },
          "libmig.flags.pythonVersion": {
            "type": "string",
            "default": "3.12",
            "description": "Enter the Python version"
          },
          "libmig.flags.repositoryName": {
            "type": "string",
            "default": "",
            "description": "Enter the name of the repository being used. If blank, assumes the project directory name."
          },
          "libmig.options.pytestFlags": {
            "type": "string",
            "default": "-vv",
            "description": "Set additional flags for running Pytest tests"
          },
          "libmig.flags.testSuitePath": {
            "type": "string",
            "default": "/tests",
            "description": "Set the default location to look for test files"
          },
          "libmig.flags.outputPath": {
            "type": "string",
            "default": ".libmig",
            "description": "Set the path to the desired output directory"
          },
          "libmig.flags.requirementFilePath": {
            "type": "string",
            "default": "requirements.txt",
            "description": "Set the path to the desired requirement file"
          }
        }
      }
    ],
    "icons": {
      "libmig-icon": {
        "description": "Cover icon for libmig view",
        "default": "library"
      }
    },
    "menus": {
      "editor/context": [
        {
          "when": "resourceFilename == requirements.txt || resourceFilename == requirements-dev.txt",
          "command": "libmig.migrate",
          "group": "navigation"
        }
      ]
    },
    "views": {
      "libmig-view": [
        {
          "id": "libmig-libraries",
          "name": "Detected Libraries"
        },
        {
          "id": "libmig-results",
          "name": "Test Results"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "libmig-view",
          "title": "LibMig",
          "icon": "media/library-icon.svg"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "test:unit": "mocha -r ts-node/register src/test/unit/**/*.test.ts",
    "test:ext": "npm run compile && node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/chai": "^4.3.20",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "chai": "^4.5.0",
    "eslint": "^9.29.0",
    "mocha": "^11.7.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2"
  },
  "dependencies": {
    "@vscode/extension-telemetry": "^1.0.0",
    "diff": "^8.0.2"
  }
}
